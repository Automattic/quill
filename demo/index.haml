!!! 5
%html
  %head
    %title Stypi Editor Demo
    %link{:rel => 'stylesheet', :type => 'text/css', :href => 'styles/reset.css'}
    %link{:rel => 'stylesheet', :type => 'text/css', :href => 'styles/style.css'}
    %meta{:charset => 'utf-8'}

  %body
    #content-container
      .editor-wrapper
        #formatting-container.formatting-container
          %select.family
            %option{:value => false, :selected => true}  Sans Serif
            %option{:value => 'serif'}      Serif
            %option{:value => 'monospace'}  Monospace
          %select.size
            %option{:value => 'small'}   Small
            %option{:value => false, :selected => true} Normal
            %option{:value => 'large'}   Large
            %option{:value => 'huge'}    Huge
          %select.color
            %option{:value => 'white'}   White
            %option{:value => false, :selected => true}  Black
            %option{:value => 'red'}     Red
            %option{:value => 'blue'}    Blue
            %option{:value => 'lime'}    Lime
            %option{:value => 'teal'}    Teal
            %option{:value => 'magenta'} Magenta
            %option{:value => 'yellow'}  Yellow
          %select.background
            %option{:value => false, :selected => true}   White
            %option{:value => 'black'}   Black
            %option{:value => 'red'}     Red
            %option{:value => 'blue'}    Blue
            %option{:value => 'lime'}    Lime
            %option{:value => 'teal'}    Teal
            %option{:value => 'magenta'} Magenta
            %option{:value => 'yellow'}  Yellow
          %button.format-button.bold Bold
          %button.format-button.italic Italic
          %button.format-button.underline Under
          %button.format-button.strike Strike
          %button.format-button.link Link
        #editor-container.editor-container
          = Haml::Engine.new(File.read('demo/content.haml')).render

    %script{:type => 'text/javascript', :src => '../scribe.all.js'}
    :javascript
      var editor = new Scribe.Editor('editor-container');
      var toolbar = new Scribe.Toolbar('formatting-container', editor);
      if (console) {
        editor.on(Scribe.Editor.events.USER_TEXT_CHANGE, function(delta) {
          console.info('Text', delta);
        }).on(Scribe.Editor.events.SELECTION_CHANGE, function(range) {
          if (range) {
            console.info('Range', range.start.index, range.start.leafNode, range.start.offset, range.end.index, range.end.leafNode, range.end.offset);
          } else {
            console.info('Range', range);
          }
        });
      }
